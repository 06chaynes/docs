<?xml version="1.0" encoding="utf-8"?>
<commands>


    <command>
        <subnav>submit</subnav>
        <name>Payment</name>
        <admin>false</admin>
        <desc>Submit a payment transaction.</desc>

        <argument>
            <name>TransactionType</name>
            <required>true</required>
            <desc>Set to "Payment".</desc>
        </argument>
        <argument>
            <name>Account</name>
            <required>true</required>
            <desc>The account sending the payment.</desc>
        </argument>
        <argument>
            <name>Destination</name>
            <required>true</required>
            <desc>The account receiving the payment.</desc>
        </argument>
        <argument>
            <name>Amount</name>
            <type>amount</type>
            <required>true</required>
            <desc><![CDATA[ The amount to send. This is either a number of <a href="wiki.gostellar.org/Stroops">stroops</a> for sending STR or a {currency,issuer,value} triplet for sending a credit. ]]></desc>
        </argument>
        <argument>
            <name>Fee</name>
            <desc>If unspecified stellard will fill in the appropriate amount of fee.</desc>
        </argument>

        <cli_example><![CDATA[
>stellard submit s3q5ZGX2ScQK2rJ4JATp7rND6X5npG3De8jMbB7tuvm2HAVHcCN "{"TransactionType":"Payment","Account":"ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb","Destination":"gHJPw9kW8v4BsUyDnBR8ZHWo8aEkhUMeAq","Amount":"2500000000"}"

        ]]><cli_example>
        <rpc_example><![CDATA[
>curl -X POST -d \
 '{ "method" : "submit", "params" : [ { "secret" : "sfwtwgV3zHekZMm6F2cNPzEGzogQqPMEZcdVftKnrstngZvotYr", "tx_json" : {"TransactionType":"Payment","Account":"gM4Fpv2QuHY4knJsQyYGKEHFGw3eMBwc1U","Destination":"g4eRqgZfzfj3132y17iaf2fp6HQj1gofjt","Amount": { "currency":"USD", "value":"2", "issuer": "gBAde4mkDijZatAdNhBzCsuC7GP4MzhA3B" }} ] }'  http://public-01.gostellar.org:9002

        ]]></rpc_example>

        <ws_example><![CDATA[
            { "command" : "submit", "secret" : "s3q5ZGX2ScQK2rJ4JATp7rND6X5npG3De8jMbB7tuvm2HAVHcCN", "tx_json" :  { "TransactionType":"Payment","Account":"ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb","Destination":"gHJPw9kW8v4BsUyDnBR8ZHWo8aEkhUMeAq","Amount":"1000000000"} }

            {"result":{"engine_result":"tesSUCCESS","engine_result_code":0,"engine_result_message":"The transaction was applied.","tx_blob":"12000022...","hash":"D384E8A..."}},"status":"success","type":"response"}

        ]]></ws_example>
    </command>

    <command>
        <name>AccountSet</name>
        <subnav>submit</subnav>
        <admin>false</admin>
        <desc>Submit an AccountSet transaction. This set various flags of the account entry.</desc>
    </command>

    <command>
        <name>SetRegularKey</name>
        <subnav>submit</subnav>
        <admin>false</admin>
        <desc>Submit an SetRegularKey transaction. This set various flags of the account entry.</desc>
    </command>

    <command>
        <name>OfferCreate</name>
        <subnav>submit</subnav>
        <admin>false</admin>
        <desc>Submit an OfferCreate transaction. This adds an offer to the distributed order book.
            Offers are commitments by the offerer to trade a certain amount of one currency for another. Offers can be partially taken.
            Creating an offer might result in an immediate trade if the created offer crosses with an existing one.</desc>
        <argument>
            <name>Account</name>
            <required>true</required>
            <desc>The account creating the offer.</desc>
        </argument>
        <argument>
            <name>TakerGets</name>
            <required>true</required>
            <type>amount</type>
            <desc>This is what the account taking the offer will get. It is what the offer creator is agreeing to pay.</desc>
        </argument>
        <argument>
            <name>TakerPays</name>
            <type>amount</type>
            <required>true</required>
            <desc>This is what the offer creator will get and what the offer taker will pay.</desc>
        </argument>
        <argument>
            <name>OfferSequence</name>
            <required>false</required>
            <desc>The sequence number of a previous offer. If specified the previous offer will be replaced with this one.</desc>
        </argument>

        <ws_example><![CDATA[
            { "command" : "submit", "secret" : "s3q5ZGX2ScQK2rJ4JATp7rND6X5npG3De8jMbB7tuvm2HAVHcCN", "tx_json" :
            { "TransactionType":"OfferCreate", "Account":"ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb", "TakerGets": { "currency":"USD", "value":"1500", "issuer": "ghj4kXtHfQcCaLQwpLJ11q2hq6248R7k9C" }, "TakerPays": { "currency":"BTC", "value":"2.5", "issuer": "ghj4kXtHfQcCaLQwpLJ11q2hq6248R7k9C" }} }

            {"result":{"engine_result":"tesSUCCESS","engine_result_code":0,"engine_result_message":"The transaction was applied.","tx_blob":"12000022...","hash":"D384E8A..."}},"status":"success","type":"response"}

        ]]></ws_example>
    </command>

    <command>
        <name>OfferCancel</name>
        <subnav>submit</subnav>
        <admin>false</admin>
        <desc>Cancels an offer this account has made.</desc>
        <argument>
            <name>Account</name>
            <required>true</required>
            <desc>The account canceling the offer.</desc>
        </argument>
        <argument>
            <name>OfferSequence</name>
            <required>true</required>
            <desc>The sequence number of the offer to cancel.</desc>
        </argument>
    </command>

    <command>
        <name>TrustSet</name>
        <subnav>submit</subnav>
        <admin>false</admin>
        <desc>Allows this account to hold credit in some currency from some other account. Any account say that it trusts another account for a particular currency up to a particular limit. Once an account trusts another it can hold credit from that other account.</desc>
        <argument>
            <name>Account</name>
            <required>true</required>
            <desc>The account extending trust.</desc>
        </argument>
        <argument>
            <name>LimitAmount</name>
            <required>true</required>
            <type>amount</type>
            <desc>An amount field specifying the type and amount of credit this account is willing to hold.</desc>
        </argument>
    </command>

    <command>
        <name>submit</name>
        <admin>false</admin>
        <desc>Submits a transaction to the network. The transaction can be submitted unsigned if you include your secret key and stellard will sign it for you.</desc>

        <argument>
            <name>secret</name>
            <required>false</required>
            <desc>The signer's secret key. Do not provide this field to untrusted servers. Required to submit tx_json transactions.</desc>
        </argument>
        <argument>
            <name>tx_json</name>
            <required>false</required>
            <desc>This is the JSON representation of the transaction to submit. See the specific transactions for details.</desc>
        </argument>
        <argument>
            <name>tx_blob</name>
            <required>false</required>
            <desc>This is a signed and serialized transaction. Use this version if you don't want to expose your secret key to stellard.</desc>
        </argument>
    </command>

</commands>