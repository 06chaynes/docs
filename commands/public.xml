<?xml version="1.0" encoding="utf-8"?>
<commands>
    <command>
        <name>account_currencies</name>
        <admin>false</admin>
        <desc>Lists the currencies an account can send or receive.</desc>

        <argument>
            <name>account</name>
            <required>true</required>
            <value>AccountID</value>
            <desc>The account ID you are interested in.</desc>
        </argument>
        <argument>
            <name>ledger_index</name>
            <default>current</default>
            <values>
                <value>
                    <name>#</name>
                    <desc>Some particular ledger number.</desc>
                </value>
                <value>
                    <name>current</name>
                    <desc>This is the server's own computation of the current ledger. It is subject to change.</desc>
                </value>
                <value>
                    <name>closed</name>
                    <desc>select the last closed ledger. This is the server's own computation of the last ledger. It is only a proposal.</desc>
                </value>
                <value>
                    <name>validated</name>
                    <desc>select the last validated ledger. This a definitive ledger which will not be reversed without consent of the network. Only a network wide catastrophe might cause a reversal to be agreed upon.</desc>
                </value>
            </values>
            <desc>A particular ledger to get this information from.</desc>
        </argument>
        <argument>
            <name>ledger_hash</name>
            <value>A 20 byte hexadecimal value.</value>
            <desc>Specify a ledger by its hash to get this information from.</desc>
        </argument>


        <result>
            <name>receive_currencies</name>
            <desc>Array of currencies this account is able to receive.</desc>
        </result>
        <result>
            <name>send_currencies</name>
            <desc>Array of currencies this account is able to send.</desc>
        </result>

        <cli_example>
            > stellard account_currencies gM4Fpv2QuHY4knJsQyYGKEHFGw3eMBwc1U

            Connecting to: 0.0.0.0:9002
            {
            "result" : {
            "ledger_current_index" : 21741,
            "receive_currencies" : ["USD","LTC"],
            "send_currencies" : ["USD","LTC"],
            "status" : "success"
            }
            }
        </cli_example>
        <rpc_example>
            > curl -X POST -d \
            '{ "method" : "account_currencies", "params" : [ { "account" : "gM4Fpv2QuHY4knJsQyYGKEHFGw3eMBwc1U", "ledger_index" : 400 } ] }' \
            http://public-01.gostellar.org:9002

            {
            "result":{
            "ledger_index":400,
            "receive_currencies":["USD","EUR"],
            "send_currencies":["USD","BTC"],
            "status":"success"
            }
            }
        </rpc_example>
        <ws_example>
            { "command" : "account_currencies", "id":4, "account" : "gM4Fpv2QuHY4knJsQyYGKEHFGw3eMBwc1U", "ledger_hash":"876BD33202CBBF87D756E61DA74F5235B38D819BFD2E1C17DE7B2334EFDD0B2D" }

            {
            "id":4,
            "result":{
            "ledger_hash":"876BD33202CBBF87D756E61DA74F5235B38D819BFD2E1C17DE7B2334EFDD0B2D",
            "ledger_index":21755,
            "receive_currencies":["ZAR"],
            "send_currencies":["ZAR"]
            },
            "status":"success",
            "type":"response"
            }
        </ws_example>
    </command>

    <command>
        <name>account_info</name>
        <admin>false</admin>
        <desc>Returns information about the given account.</desc>
        
            <argument>
                <name>account</name>
                <required>true</required>
                <desc>The account you are interested in.</desc>
            </argument>
          
        
        
            <result>
                <name>Balance</name>
                <desc>The number of STRs this account holds , in satoshis.</desc>
            </result>
            <result>
                <name>Flags</name>
                <desc>What account flags are set.</desc>
            </result>
            <result>
                <name>OwnerCount</name>
                <desc>The number of offers and trust lines created by this account. Useful for calculating the account's reserve.</desc>
            </result>
            <result>
                <name>PreviousTxnID</name>
                <desc>The Transaction ID of the last transaction creatd by this account.</desc>
            </result>
            <result>
                <name>PreviousTxnLgrSeq</name>
                <desc>The ledger sequence number this account's last transaction appeared in.</desc>
            </result>
            <result>
                <name>Sequence</name>
                <desc>The current transaction sequence number of this account.</desc>
            </result>
            <result>
                <name>index</name>
                <desc>The index in the ledger of this account entry.</desc>
            </result>
        
        <cli_example>
            > stellard account_info gM4Fpv2QuHY4knJsQyYGKEHFGw3eMBwc1U
        </cli_example>
        <rpc_example>
            > curl -X POST -d \
            '{ "method" : "account_info", "params" : [ { "account" : "gM4Fpv2QuHY4knJsQyYGKEHFGw3eMBwc1U", "ledger_index" : 400 } ] }' \
            http://public-01.gostellar.org:9002

        </rpc_example>
        <ws_example>
            { "command" : "account_info", "id":24, "account" : "gM4Fpv2QuHY4knJsQyYGKEHFGw3eMBwc1U" }

            {
            "id":24,
            "result":{
            "account_data":{
            "Account":"gM4Fpv2QuHY4knJsQyYGKEHFGw3eMBwc1U",
            "Balance":"53999960",
            "Flags":0,
            "LedgerEntryType": "AccountRoot",
            "OwnerCount":1,
            "PreviousTxnID":"E0DB3587248BAC7D0C9F86BFAFA238BD54586363B45762D17FF793EE6908AB33",
            "PreviousTxnLgrSeq":19217,
            "Sequence":5,
            "index":"0E72998F3A8AD5005C8796FFB7B984BCCDA91683150CAD95CE59B6C8781BFEB7"
            },
            "ledger_current_index":21861
            },
            "status":"success",
            "type":"response"
            }
        </ws_example>
    </command>

    <command>
        <name>account_lines</name>
        <admin>false</admin>
        <desc>
            Gets a list of all trust lines a particular account is a part of. A trust line is how credits are tracked in the Stellar network.
            A trust line has an account on either end, a currency , the amount each account trusts the other for in that currency, and a current balance.
        </desc>

            <argument>
                <name>account</name>
                <required>true</required>
                <desc>The account you are fetching the lines of. Account A.</desc>
            </argument>
            <argument>
                <name>peer</name>

                
                <desc>If specified will only return the trust lines from Account A to this peer.</desc>
            </argument>

            <result>
                <name>account</name>
                <desc>The account on the other side of the trust line. Account B.</desc>
            </result>
            <result>
                <name>balance</name>
                <desc>The current balance of credit between A and B. Balance is positive if A is holding IOUs from B.</desc>
            </result>
            <result>
                <name>currency</name>
                <desc>The currency of the trust line.</desc>
            </result>
            <result>
                <name>limit</name>
                <desc>How much account A trusts account B for.</desc>
            </result>
            <result>
                <name>limit_peer</name>
                <desc>How much account B trusts account A for.</desc>
            </result>
            <result>
                <name>quality_in</name>
                <desc></desc>
            </result>
            <result>
                <name>quality_out</name>
                <desc></desc>
            </result>

        <cli_example>
            C:\internet\stellar2>rippled account_lines ghj4kXtHfQcCaLQwpLJ11q2hq6248R7k9C
            Loading: "C:\internet\stellar2\rippled.cfg"
            Connecting to: 127.0.0.1:9002
            {
            "result" : {
            "account" : "ghj4kXtHfQcCaLQwpLJ11q2hq6248R7k9C",
            "lines" : [
            {
            "account" : "gT5KkmymioQvnwjuRkWZVRzsszfPxLCvU",
            "balance" : "-5000",
            "currency" : "USD",
            "limit" : "0",
            "limit_peer" : "10000",
            "quality_in" : 0,
            "quality_out" : 0
            },
            {
            "account" : "gHJPw9kW8v4BsUyDnBR8ZHWo8aEkhUMeAq",
            "balance" : "0",
            "currency" : "USD",
            "limit" : "0",
            "limit_peer" : "10000",
            "quality_in" : 0,
            "quality_out" : 0
            }
            ],
            "status" : "success"
            }
            }
        </cli_example>
        <rpc_example>

        </rpc_example>
        <ws_example>

        </ws_example>
    </command>

    <command>
        <name>account_offers</name>
        <admin>false</admin>
        <desc>Gets a list of all the offers this account has made.</desc>
       
            <argument>
                <name>account</name>
                <required>true</required>
                <desc></desc>
            </argument>

        
        <cli_example>

        </cli_example>
        <rpc_example>

        </rpc_example>
        <ws_example>

        </ws_example>
    </command>

    <command>
        <name>account_tx</name>
        <admin>false</admin>
        <desc>Get a list of transactions that affected this account.</desc>
        
            <argument>
                <name>account</name>
                <required>true</required>
                <desc></desc>
            </argument>
            <argument>
                <name>ledger_min</name>
                <value>integer</value>
                <default>0</default>
                
                <desc>The earliest ledger to fech transactions from.</desc>
            </argument>
            <argument>
                <name>ledger_max</name>
                <value>integer</value>
                <default>-1</default>
                
                <desc>The latest ledger to fetch transactions from. Set to -1 to use the current ledger as the maximum.</desc>
            </argument>
            <argument>
                <name>limit</name>
                <value>integer</value>
                <default>-1</default>
                
                <desc>Limit the number of transactions stellard will send back to you. stellard is configured with its own limits so you may not receive as many transactions as you ask for. Set to -1 to use the limit set by stellard.</desc>
            </argument>
        
        

        
        <cli_example>

        </cli_example>
        <rpc_example>

        </rpc_example>
        <ws_example>

        </ws_example>
    </command>

    <command>
        <name>book_offers</name>
        <admin>false</admin>
        <desc>Returns the offers in a given orderbook. An orderbook is a particular currency/issuer on the buy side and a differnt currency/issuer on the sell side.</desc>
        
            <argument>
                <name>account</name>
                <required>true</required>
                <desc></desc>
            </argument>
            <argument type="ledger_index"></argument>
            <argument type="ledger_hash"></argument>
        
        
            <result>
                <name>receive_currencies</name>
                <desc></desc>
            </result>
            <result>
                <name>send_currencies</name>
                <desc></desc>
            </result>
        
        <cli_example>

        </cli_example>
        <rpc_example>

        </rpc_example>
        <ws_example>

        </ws_example>
    </command>

    <command>
        <name>ledger</name>
        <admin>false</admin>
        <desc>Gets info about a particular ledger.</desc>
        
            <argument>
                <name>full</name>
                
                <value>bool</value>
                <default>false</default>
                <desc>Return all the ledger entries. This is equivalent to setting accounts, transactions, and expand all to true. stellard can be configured to support this or not.</desc>
            </argument>
            <argument>
                <name>accounts</name>
                
                <value>bool</value>
                <default>false</default>
                <desc>If set to true, it will return the accounts tree for that public ledger block.</desc>
            </argument>
            <argument>
                <name>transactions</name>
                
                <value>bool</value>
                <default>false</default>
                <desc>If true, return the transactions for the ledger.</desc>
            </argument>
            <argument>
                <name>expand</name>
                
                <value>bool</value>
                <default>false</default>
                <desc>If set to true, returns the ledger and transaction entries in JSON format. Otherwise, returns their identifying hashes.</desc>
            </argument>
        
        

        
        <cli_example>

        </cli_example>
        <rpc_example>

        </rpc_example>
        <ws_example>

        </ws_example>
    </command>

    <command>
        <name>path_find</name>
        <admin>false</admin>
        <desc>Lists the currencies an account can send or receive.</desc>
        
            <argument>
                <name>account</name>
                <required>true</required>
                <desc></desc>
            </argument>
        
        
            <result>
                <name>receive_currencies</name>
                <desc></desc>
            </result>
            <result>
                <name>send_currencies</name>
                <desc></desc>
            </result>
        
        <cli_example>

        </cli_example>
        <rpc_example>

        </rpc_example>
        <ws_example>

        </ws_example>
    </command>

    <command>
        <name>ping</name>
        <admin>false</admin>
        <desc>Lists the currencies an account can send or receive.</desc>
        
            <argument>
                <name>account</name>
                <required>true</required>
                <desc></desc>
            </argument>
        
        
            <result>
                <name>receive_currencies</name>
                <desc></desc>
            </result>
            <result>
                <name>send_currencies</name>
                <desc></desc>
            </result>
        
        <cli_example>

        </cli_example>
        <rpc_example>

        </rpc_example>
        <ws_example>

        </ws_example>
    </command>

    <command>
        <name>ripple_path_find</name>
        <admin>false</admin>
        <desc>Lists the currencies an account can send or receive.</desc>
        
            <argument>
                <name>account</name>
                <required>true</required>
                <desc></desc>
            </argument>
        
        
            <result>
                <name>receive_currencies</name>
                <desc></desc>
            </result>
            <result>
                <name>send_currencies</name>
                <desc></desc>
            </result>
        
        <cli_example>

        </cli_example>
        <rpc_example>

        </rpc_example>
        <ws_example>

        </ws_example>
    </command>

    <command>
        <name>sign</name>
        <admin>false</admin>
        <desc>Lists the currencies an account can send or receive.</desc>
        
            <argument>
                <name>account</name>
                <required>true</required>
                <desc></desc>
            </argument>
        
        
            <result>
                <name>receive_currencies</name>
                <desc></desc>
            </result>
            <result>
                <name>send_currencies</name>
                <desc></desc>
            </result>
        
        <cli_example>

        </cli_example>
        <rpc_example>

        </rpc_example>
        <ws_example>

        </ws_example>
    </command>



    <command>
        <name>subscribe</name>
        <admin>false</admin>
        <desc>Lists the currencies an account can send or receive.</desc>
        
            <argument>
                <name>account</name>
                <required>true</required>
                <desc></desc>
            </argument>
        
        
            <result>
                <name>receive_currencies</name>
                <desc></desc>
            </result>
            <result>
                <name>send_currencies</name>
                <desc></desc>
            </result>
        
        <cli_example>

        </cli_example>
        <rpc_example>

        </rpc_example>
        <ws_example>
{ "command" : "subscribe",   "accounts" : [ "ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb" ] }
...
 {"engine_result":"tesSUCCESS","engine_result_code":0,"engine_result_message":"The transaction was applied.","ledger_hash":"7C78761D95CC3C34C99163192637B2725FC2444279E983CCEF5A63A6BB121F67","ledger_index":7,"meta":{"AffectedNodes":[{"ModifiedNode":{"FinalFields":{"Account":"ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb","Balance":"99999979999999988","Flags":0,"OwnerCount":0,"Sequence":2},"LedgerEntryType":"AccountRoot","LedgerIndex":"6047FB9C7976F2D0554618F5ABFF423E7136205BAF19E92BE9D295E549442C45","PreviousFields":{"Balance":"100000000000000000","Sequence":1}}},{"CreatedNode":{"LedgerEntryType":"AccountRoot","LedgerIndex":"6C38D0E3F8D58366F1D8208236B8B0B83C20BAC877617379BDDE45D74993F1A9","NewFields":{"Account":"gL4ki816G4PpoGUzbv5C8BefKLz3ab9wDs","Balance":"20000000000","Sequence":1}}}],"TransactionIndex":0,"TransactionResult":"tesSUCCESS"},"status":"closed","transaction":{"Account":"ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb","Amount":"20000000000","Destination":"gL4ki816G4PpoGUzbv5C8BefKLz3ab9wDs","Fee":"12","Flags":2147483648,"LastLedgerSequence":15,"Sequence":1,"SigningPubKey":"BE3900393891A2A2244E28A82C43BA94CA94DD6BFE36D523576A22BFF86055D4","TransactionType":"Payment","TxnSignature":"162008E178B101001AFEA49B14540A493FEFCE1F9CF86843CD73F952BA0800097F6DCB5ABB9C143FB3AD066388478713FE4947DC2CADC8562ABC223870569D05","date":459297000,"hash":"12CEB75F6FCE23C05A668A3472B375EAFC51F79EB0EA0CBE1BD9FD56054AD569"},"type":"transaction","validated":true}
...
        </ws_example>
    </command>

    <command>
        <name>transaction_entry</name>
        <admin>false</admin>
        <desc>Lists the currencies an account can send or receive.</desc>
        
            <argument>
                <name>account</name>
                <required>true</required>
                <desc></desc>
            </argument>
        
        
            <result>
                <name>receive_currencies</name>
                <desc></desc>
            </result>
            <result>
                <name>send_currencies</name>
                <desc></desc>
            </result>
        
        <cli_example>

        </cli_example>
        <rpc_example>

        </rpc_example>
        <ws_example>

        </ws_example>
    </command>

    <command>
        <name>tx</name>
        <admin>false</admin>
        <desc>Lists the currencies an account can send or receive.</desc>
        
            <argument>
                <name>account</name>
                <required>true</required>
                <desc></desc>
            </argument>
        
        
            <result>
                <name>receive_currencies</name>
                <desc></desc>
            </result>
            <result>
                <name>send_currencies</name>
                <desc></desc>
            </result>
        
        <cli_example>

        </cli_example>
        <rpc_example>

        </rpc_example>
        <ws_example>

        </ws_example>
    </command>

    <command>
        <name>tx_history</name>
        <admin>false</admin>
        <desc>Returns the last N transactions starting from the given index. Returns from latest to earliest. N is set by stellard.</desc>
        
            <argument>
                <name>start</name>
                <required>true</required>
                <desc>Index to start returning transactions from.</desc>
            </argument>
        
        <cli_example>

        </cli_example>
        <rpc_example>

        </rpc_example>
        <ws_example>
{ "command" : "tx_history", "start" : "5" }

 {"result":{
    "index":5,
    "txs":[{
        "Account":"ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb",
        "Amount":"24000000000",
        "Destination":"gJar3pA4cj8W5SvKg9JZ4PtiKkLj8613k3",
        "Fee":"12",
        "Flags":2147483648,
        "LastLedgerSequence":21498,
        "Sequence":30,
        "SigningPubKey":"BE3900393891A2A2244E28A82C43BA94CA94DD6BFE36D523576A22BFF86055D4",
        "TransactionType":"Payment",
        "TxnSignature":"75B068D4...",
        "hash":"498AE15B...",
        "inLedger":21490,
        "ledger_index":21490
            },
    ...
    ]},
    "status":"success",
    "type":"response"
  }
        </ws_example>
    </command>

    <command>
        <name>unsubscribe</name>
        <admin>false</admin>
        <desc><![CDATA[ Unsubscribe from events that were previously subscribed to. See <a href="#subscribe">subscribe<a>. ]]></desc>

            <argument>
                <name>streams</name>
                
                <desc>List of streams you no longer want events on.</desc>
            </argument>
        <argument>
            <name>accounts</name>
            
            <desc>List of accounts you no longer want events on.</desc>
        </argument>
        <argument>
            <name>rt_accounts</name>
            
            <desc>List of rt_accounts you no longer want events on.</desc>
        </argument>
        <argument>
            <name>url</name>
            
            <desc>URL to stop sending events to.</desc>
        </argument>

        
        <cli_example>

        </cli_example>
        <rpc_example>

        </rpc_example>
        <ws_example>

        </ws_example>
    </command>

    <command>
        <name>wallet_propose</name>
        <admin>false</admin>
        <desc>Generates a random secret key and an accountID based on this key.</desc>

        <argument>
            <name>passphrase</name>
            
            <desc>If specified it will create the secret key from a hash of the passphrase.</desc>
        </argument>


        <result>
            <name>account_id</name>
            <desc>The generated accountID. It will become a usable stellar account if someone sends stellars to it.</desc>
        </result>
        <result>
            <name>master_seed</name>
            <desc>The secret key in base58 format that corresponds to the accountID.</desc>
        </result>
        <result>
            <name>master_seed_hex</name>
            <desc>The secret key in hex format that corresponds to the accountID.</desc>
        </result>
        <result>
            <name>public_key</name>
            <desc>The public key in base58 format that corresponds to the accountID.</desc>
        </result>
        <result>
            <name>public_key_hex</name>
            <desc>The public key in hex format that corresponds to the accountID.</desc>
        </result>

        <cli_example>

        </cli_example>
        <rpc_example>

        </rpc_example>
        <ws_example>
{ "command" : "wallet_propose" }
{"result":{
    "account_id":"g9yMgy1dxac5UBSxc1nxtVUyhw11qYPLcs",
     "master_seed":"s3YBKJpSJkyfoJQHHSaKwGPZyW73ThahyVjh7oehcQPq5T4ncHU",
     "master_seed_hex":"B70A1108710883663AE1B18356FB1BF99FAF3581939B1E6FC72A1FD83DE12910",
     "public_key":"pGFGGYRCkQHbHMbjQJJHU4SuduR5hU77kqr7EkhDd8quZF2xTAR",
     "public_key_hex":"CF8165969EEC1B05DC79CD0CE472AE827FC1CD6E0F8FEFDB394C2ED6379219E6"},
  "status":"success","type":"response"
}
        </ws_example>
    </command>
</commands>


