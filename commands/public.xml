<?xml version="1.0" encoding="utf-8"?>
<commands>
    <command>
        <name>account_tx</name>
        <admin>false</admin>
        <desc>Get a list of transactions that affected this account.</desc>

        <argument>
            <name>account</name>
            <required>true</required>
            <desc></desc>
        </argument>
        <argument>
            <name>ledger_min</name>
            <type>int</type>
            <default>0</default>

            <desc>The earliest ledger to fetch transactions from.</desc>
        </argument>
        <argument>
            <name>ledger_max</name>
            <type>int</type>
            <default>-1</default>

            <desc>The latest ledger to fetch transactions from. Set to -1 to use the current ledger as the maximum.</desc>
        </argument>
        <argument>
            <name>limit</name>
            <type>int</type>
            <default>-1</default>

            <desc>Limit the number of transactions stellard will send back to you. stellard is configured with its own limits so you may not receive as many transactions as you ask for. Set to -1 to use the limit set by stellard.</desc>
        </argument>



     <cli_example><![CDATA[

        ]]></cli_example>
        <rpc_example><![CDATA[

        ]]></rpc_example>
        <ws_example><![CDATA[

        ]]></ws_example>
    </command>

    <command>
        <name>book_offers</name>
        <admin>false</admin>
        <desc>Returns the offers in a given orderbook. An orderbook is a particular currency/issuer on the buy side and a different currency/issuer on the sell side.</desc>


        <argument>
            <name>taker_gets</name>
            <required>true</required>
            <type>amount</type>
            <desc>The amount for the buy side.</desc>
        </argument>
        <argument>
            <name>taker_pays</name>
            <required>true</required>
            <type>amount</type>
            <desc>The amount for the sell side.</desc>
        </argument>
        <argument>
            <name>taker</name>
            <desc>If specified will show the orderbook from the point of view of taker. </desc>
        </argument>
        <argument>
            <name>marker</name>
            <desc>Token indicating start of page, it is returned from a previous call.</desc>
        </argument>
        <argument>
            <name>autobridge</name>
            <default>true</default>
            <type>bool</type>
            <desc>True to include orders synthesized through STR books.</desc>
        </argument>
        <common>ledger_index</common>

        <result>
            <name>hash</name>
            <desc>The hash of the submitted transaction.</desc>
        </result>

        <result>
            <name>marker</name>
            <desc>Used for subsequent calls to page through the results. Not returned if there are no more results.</desc>
        </result>
        <result>
            <name>offers</name>
            <desc>The offers sorted from best to worst. </desc>
        </result>

        <cli_example><![CDATA[

        ]]></cli_example>
        <rpc_example><![CDATA[
        curl -X POST -d '{"method": "book_offers", "params": [{"taker_pays": {"value": "5000","currency": "STR"}, "taker_gets": {"issuer":"ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb","currency": "USD","value": 10}}]}' public-01-stg.gostellar.org:9002

        {
          "result": {
            "ledger_current_index": 5778,
            "offers": [],
            "status": "success"
          }
        }

        ]]></rpc_example>
        <ws_example><![CDATA[
        {
          "command": "book_offers",
          "taker_pays": {
            "value": "5000",
            "currency": "STR"
          },
          "taker_gets": {
            "issuer": "ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb",
            "currency": "USD",
            "value": 10
          }
        }


        {
          "result": {
            "ledger_current_index": 5492,
            "offers": []
          },
          "status": "success",
          "type": "response"
        }
        ]]></ws_example>
    </command>

    <command>
        <name>ledger</name>
        <admin>false</admin>
        <desc>Gets info about a particular ledger.</desc>

            <argument>
                <name>full</name>

                <type>bool</type>
                <default>false</default>
                <desc>Return all the ledger entries. This is equivalent to setting accounts, transactions, and expand all to true. stellard can be configured to support this or not.</desc>
            </argument>
            <argument>
                <name>accounts</name>

                <type>bool</type>
                <default>false</default>
                <desc>If set to true, it will return the accounts tree for that public ledger block.</desc>
            </argument>
            <argument>
                <name>transactions</name>

                <type>bool</type>
                <default>false</default>
                <desc>If true, return the transactions for the ledger.</desc>
            </argument>
            <argument>
                <name>expand</name>

                <type>bool</type>
                <default>false</default>
                <desc>If set to true, returns the ledger and transaction entries in JSON format. Otherwise, returns their identifying hashes.</desc>
            </argument>
        <common>ledger_index</common>




        <cli_example><![CDATA[
> stellard ledger
            Connecting to: 0.0.0.0:9002
            {
            "result" : {
            "closed" : {
            "ledger" : {
            "accepted" : true,
            "account_hash" : "62E646A558E15D64B8F2D0E3EA9D931A678CCE02866D416EE95BC686C58634AC",
            "close_time" : 459542460,
            "close_time_human" : "2014-Jul-24 18:41:00",
            "close_time_resolution" : 10,
            "closed" : true,
            "fee_pool" : "0",
            "hash" : "A2243364D4426DC0CD979FB977D3095DB60A53308F8275D4B05D03E625743FCB",
            "inflate_seq" : "1",
            "ledger_hash" : "A2243364D4426DC0CD979FB977D3095DB60A53308F8275D4B05D03E625743FCB",
            "ledger_index" : "402",
            "parent_hash" : "B3DC425B140FC2550F3DF2F69D3259A32A60BC5B46323B015EB889AE36A999F0",
            "seqNum" : "402",
            "totalCoins" : "100000000000000000",
            "total_coins" : "100000000000000000",
            "transaction_hash" : "0000000000000000000000000000000000000000000000000000000000000000"
            }
            },
            "open" : {
            "ledger" : {
            "closed" : false,
            "ledger_index" : "403",
            "parent_hash" : "A2243364D4426DC0CD979FB977D3095DB60A53308F8275D4B05D03E625743FCB",
            "seqNum" : "403"
            }
            },
            "status" : "success"
            }
            }
        ]]></cli_example>
        <rpc_example><![CDATA[
            curl -X POST -d '{ "method" : "ledger" }' http://public-01.gostellar.org:9002

            {
            "result":{
            "closed":{
            "ledger":{
            "accepted":true,
            "account_hash":"7B2FD91FF69C919A7A2C1395DB22C69D806B6D750EB1D7BB8872329A869CA98B",
            "close_time":459542140,
            "close_time_human":"2014-Jul-24 18:35:40",
            "close_time_resolution":10,
            "closed":true,
            "fee_pool":"3826",
            "hash":"333090A67B65A8CCD97D8168674D3819E94B9D42D89D7A42F5A768702099B6C7",
            "inflate_seq":"3",
            "ledger_hash":"333090A67B65A8CCD97D8168674D3819E94B9D42D89D7A42F5A768702099B6C7",
            "ledger_index":"46728",
            "parent_hash":"9BBF29D271C854949BBDB69CA6DFF847A6295A1955E6A862855F147383D8736E",
            "seqNum":"46728",
            "totalCoins":"100038147837446155",
            "total_coins":"100038147837446155",
            "transaction_hash":"0000000000000000000000000000000000000000000000000000000000000000"
            }
            },
            "open":{
            "ledger":{
            "closed":false,
            "ledger_index":"46729",
            "parent_hash":"333090A67B65A8CCD97D8168674D3819E94B9D42D89D7A42F5A768702099B6C7",
            "seqNum":"46729"
            }
            },
            "status":"success"
            }
            }
        ]]></rpc_example>
        <ws_example><![CDATA[
            { "command" : "ledger" }

            {
            "result":{
            "closed":{
            "ledger":{
            "accepted":true,
            "account_hash":"2CE104972C7FD1BC9A6FCC5D46B6D13B6F5184AEB105740BBCF69D112D6642EB",
            "close_time":459542280,
            "close_time_human":"2014-Jul-24 18:38:00",
            "close_time_resolution":10,
            "closed":true,
            "fee_pool":"0",
            "hash":"C4EDC2FF215FDE662E1771A4383C1204BB66CEFCDF375E6554DEE4229520CD20",
            "inflate_seq":"1",
            "ledger_hash":"C4EDC2FF215FDE662E1771A4383C1204BB66CEFCDF375E6554DEE4229520CD20",
            "ledger_index":"393",
            "parent_hash":"54F9E657F3122A3375C427DEE484F69F020D79FA73B85D8FFCFBA48AC763036C",
            "seqNum":"393",
            "totalCoins":"100000000000000000",
            "total_coins":"100000000000000000",
            "transaction_hash":"0000000000000000000000000000000000000000000000000000000000000000"
            }
            },
            "open":{
            "ledger":{
            "closed":false,
            "ledger_index":"394",
            "parent_hash":"C4EDC2FF215FDE662E1771A4383C1204BB66CEFCDF375E6554DEE4229520CD20",
            "seqNum":"394"
            }
            }
            },
            "status":"success",
            "type":"response"
            }
        ]]></ws_example>
    </command>

    <command>
        <name>find_path</name>
        <admin>false</admin>
        <desc><![CDATA[Finds the best path for a transfer. Stellard will continue to send updates as it finds better paths or as the state of the ledger changes until <strong>find_path</strong> is called again with the <strong>close</strong> subcommand.

A websocket connection may only have one open pathfinding request.
If stellard responds because of a client query the response will have a field <strong>type</strong> set to <em>response</em>.
If stellard is sending an unsolicited response the <strong>type</strong> field will be set to <em>find_path</em>.
This command is only available via the Websocket API. If you want to use as RPC or command line or you don't want ongoing path updates use <a href="#api-static_path_find">static_path_find</a> instead.
            ]]></desc>

            <argument>
                <name>source_account</name>
                <required>true</required>
                <desc>Sender's Stellar address.</desc>
            </argument>
        <argument>
            <name>destination_account</name>
            <required>true</required>
            <desc>Receiver's Stellar address.</desc>
        </argument>
        <argument>
            <name>destination_amount</name>
            <type>amount</type>
            <required>true</required>
            <desc>Amount sender is trying to send to receiver.</desc>
        </argument>

        <result>
            <name>alternatives</name>
            <desc>Each entry will correspond to one possible source currency.</desc>
        </result>

        <cli_example><![CDATA[ find_path only available over websocket.  ]]></cli_example>
        <rpc_example><![CDATA[ find_path only available over websocket.  ]]></rpc_example>
        <ws_example><![CDATA[   ]]></ws_example>
    </command>



    <command>
        <name>static_path_find</name>
        <admin>false</admin>
        <desc><![CDATA[Finds a path for a transfer. If you want updates to the path as the state of the ledger changes use <a href="#api-find_path">find_path</a> instead.
            ]]></desc>
        <result>
            <name>alternatives</name>
            <desc>List of path choices.</desc>
        </result>
        <result>
            <name>source_amount</name>
            <type>amount</type>
            <desc>The cost of this path for the source account.</desc>
        </result>
        <result>
            <name>paths_computed</name>
            <desc>The path to include in the payment transaction.</desc>
        </result>

        <result>
            <name>destination_currencies</name>
            <desc>List of currencies this destination can hold.</desc>
        </result>





        <cli_example><![CDATA[

        ]]></cli_example>
        <rpc_example><![CDATA[

        ]]></rpc_example>
        <ws_example><![CDATA[
            { "command" : "static_path_find",  "source_account": "ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb",  "destination_account": "ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb",  "destination_amount": "10" }
        ]]></ws_example>
    </command>

    <command>
        <name>subscribe</name>
        <admin>false</admin>
        <desc>Listen to events. If you are using websocket stellard will send you messages when an event of the type you are listening to happens.
            You can also specify a URL that is called when an event happens if you are not listening on websocket.</desc>

        <argument>
            <name>streams</name>
            <type>array</type>
            <desc><![CDATA[An array of stream names you want events on. Possible streams:
            <ul>
            <li><strong>ledger</strong>- ledger close events</li>
            <li><strong>transactions</strong>- sends a message for every transaction that makes it into a closed ledger.</li>
            <li><strong>transactions_rt</strong>- sends a message immediately when a this stellard sees a transaction and again when the transaction makes it into the ledger.</li>
            <li><strong>server</strong>- sends messages about server status and network connectivity.</li>
            </ul>
            ]]></desc>
        </argument>

        <argument>
            <name>accounts</name>
            <type>array</type>
            <desc><![CDATA[An array of accountIDs you want events on. Sends a message for any transaction that effects these accounts when each ledger is closed.]]></desc>
        </argument>

        <argument>
            <name>accounts_rt</name>
            <type>array</type>
            <desc><![CDATA[An array of accountIDs you want events on. Sends a message immediately when stellard sees a transaction effecting one of these accounts and again if the transaction is included in the ledger.]]></desc>
        </argument>

        <argument>
            <name>books</name>
            <type>array</type>
            <desc><![CDATA[An array of objects specifying <a href="wiki.gostellar.org/Order_Book>order books</a> to listen to.
            Stellard will send a message any time one of the specified order books change.
            Order book object is:
            <ul>
            <li><strong>taker_gets</strong>- type of currency and issuer the taker of these offers will get. </li>
            <li><strong>taker_pays</strong>- type of currency and issuer the taker of these offers will pay.  </li>
            <li><strong>both</strong>- if set to true will send you events for both sides of the order book. </li>
            <li><strong>snapshot</strong>- if set to true will send you the current state of the order book before it starts streaming the changes. </li>
            </ul>
            Example: { "taker_gets" : { "currency": "USD", "issuer" : address }, "taker_pays" : { "currency": "BTC", "issuer" : address }, "snapshot" : "true" , "both" : "true" }
     ]]></desc></argument>


        <argument>
            <name>url</name>
            <type>string</type>
            <desc><![CDATA[
            Specifies a URL to post messages to via JSON-RPC. Each message will come with a sequentially increasing sequence number starting with 1.
            A gap in these numbers indicates a lost message. Currently, only http is supported and hosts must be specified by IP address.
            ]]></desc>
        </argument>
        <argument>
            <name>url_username</name>
            <type>string</type>
            <desc><![CDATA[
            Optional username for JSON-RPC authentication.
            ]]></desc>
        </argument>
        <argument>
            <name>url_password</name>
            <type>string</type>
            <desc><![CDATA[
            Optional password for JSON-RPC authentication.
            ]]></desc>
        </argument>

        <cli_example><![CDATA[

        ]]></cli_example>
        <rpc_example><![CDATA[

        ]]></rpc_example>
        <ws_example><![CDATA[
{ "command" : "subscribe",   "accounts" : [ "ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb" ] }
...
 {"engine_result":"tesSUCCESS","engine_result_code":0,"engine_result_message":"The transaction was applied.","ledger_hash":"7C78761D95CC3C34C99163192637B2725FC2444279E983CCEF5A63A6BB121F67","ledger_index":7,"meta":{"AffectedNodes":[{"ModifiedNode":{"FinalFields":{"Account":"ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb","Balance":"99999979999999988","Flags":0,"OwnerCount":0,"Sequence":2},"LedgerEntryType":"AccountRoot","LedgerIndex":"6047FB9C7976F2D0554618F5ABFF423E7136205BAF19E92BE9D295E549442C45","PreviousFields":{"Balance":"100000000000000000","Sequence":1}}},{"CreatedNode":{"LedgerEntryType":"AccountRoot","LedgerIndex":"6C38D0E3F8D58366F1D8208236B8B0B83C20BAC877617379BDDE45D74993F1A9","NewFields":{"Account":"gL4ki816G4PpoGUzbv5C8BefKLz3ab9wDs","Balance":"20000000000","Sequence":1}}}],"TransactionIndex":0,"TransactionResult":"tesSUCCESS"},"status":"closed","transaction":{"Account":"ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb","Amount":"20000000000","Destination":"gL4ki816G4PpoGUzbv5C8BefKLz3ab9wDs","Fee":"12","Flags":2147483648,"LastLedgerSequence":15,"Sequence":1,"SigningPubKey":"BE3900393891A2A2244E28A82C43BA94CA94DD6BFE36D523576A22BFF86055D4","TransactionType":"Payment","TxnSignature":"162008E178B101001AFEA49B14540A493FEFCE1F9CF86843CD73F952BA0800097F6DCB5ABB9C143FB3AD066388478713FE4947DC2CADC8562ABC223870569D05","date":459297000,"hash":"12CEB75F6FCE23C05A668A3472B375EAFC51F79EB0EA0CBE1BD9FD56054AD569"},"type":"transaction","validated":true}
...
        ]]></ws_example>
    </command>



    <command>
        <name>tx</name>
        <admin>false</admin>
        <desc>Get details of a specific transaction.</desc>


        <cli_example><![CDATA[

        ]]></cli_example>
        <rpc_example><![CDATA[

        ]]></rpc_example>
        <ws_example><![CDATA[

        ]]></ws_example>
    </command>

    <command>
        <name>tx_history</name>
        <admin>false</admin>
        <desc>Returns the last N transactions starting from the given index. Returns from latest to earliest. N is set by stellard.</desc>

            <argument>
                <name>start</name>
                <required>true</required>
                <desc>Index to start returning transactions from.</desc>
            </argument>

        <cli_example><![CDATA[> stellard tx_history 8

    {
       "result":{
          "index":8,
          "status":"success",
          "txs":[
             {
                "Account":"ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb",
                "Amount":"20000999999",
                "Destination":"gJkfAwXgV6RRSPrRacabETsdujiPiAVuGC",
                "Fee":"12",
                "Flags":2147483648,
                "LastLedgerSequence":465,
                "Sequence":1,
                "SigningPubKey":"BE3900393891A2A2244E28A82C43BA94CA94DD6BFE36D523576A22BFF86055D4",
                "TransactionType":"Payment",
                "TxnSignature":"12E625A39...",
                "hash":"1B6C11BFB4FA60C63DFA65A02D5BFB7C8DBDD139B16A872453CEC77BDBF69381",
                "inLedger":457,
                "ledger_index":457
             },
             {
                "Account":"gJkfAwXgV6RRSPrRacabETsdujiPiAVuGC",
                "Amount":"4000000000",
                "Destination":"ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb",
                "Fee":"12",
                "Flags":2147483648,
                "LastLedgerSequence":469,
                "Sequence":1,
                "SigningPubKey":"2A843AEC927E0119DE785D354C1C295414C1136924DB00E2EFBAB760BDF1E812",
                "TransactionType":"Payment",
                "TxnSignature":"2A3D35895...",
                "hash":"45354C7FE33AC84D2B8188CC1DF28EC30259326442CF1EE165970198C1EA124D",
                "inLedger":461,
                "ledger_index":461
             }
          ]
       }
    }
]]></cli_example>
        <rpc_example><![CDATA[> curl -X POST -d '{ "method" : "tx_history", "params" : [ { "start" : "10" } ] }' public-01-stg.gostellar.org:9002
{
   "result":{
      "index":10,
      "status":"success",
      "txs":[
         {
            "Account":"ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb",
            "Amount":{
               "currency":"DBG",
               "issuer":"gQ9FwPh5bRyS3K5uH47ZGpKZ4JdjJe7jJ8",
               "value":"15"
            },
            "Destination":"gQ9FwPh5bRyS3K5uH47ZGpKZ4JdjJe7jJ8",
            "Fee":"10",
            "Flags":2147483648,
            "Sequence":62,
            "SigningPubKey":"BE3900393891A2A2244E28A82C43BA94CA94DD6BFE36D523576A22BFF86055D4",
            "TransactionType":"Payment",
            "TxnSignature":"D23E93C3FBD0...",
            "hash":"0104046F731D23EBD86FE3BF9AC1D3CCBC5838D0A4D9EB15938E1C995A638481",
            "inLedger":2484,
            "ledger_index":2484
         },
         {
            "Account":"ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb",
            "Amount":{
               "currency":"DBG",
               "issuer":"gQ9FwPh5bRyS3K5uH47ZGpKZ4JdjJe7jJ8",
               "value":"1"
            },
            "Destination":"gQ9FwPh5bRyS3K5uH47ZGpKZ4JdjJe7jJ8",
            "Fee":"10",
            "Flags":2147483648,
            "Sequence":61,
            "SigningPubKey":"BE3900393891A2A2244E28A82C43BA94CA94DD6BFE36D523576A22BFF86055D4",
            "TransactionType":"Payment",
            "TxnSignature":"F4DC53BD3046...",
            "hash":"4FA4B0CC6AD6C64912215125A08E7CE8B3EEC84F6A843D28EA51C9D3EB6C4B6F",
            "inLedger":2483,
            "ledger_index":2483
         },
        ...
      ]
   }
}
        ]]></rpc_example>
        <ws_example><![CDATA[{ "command" : "tx_history", "start" : "5" }

 {"result":{
    "index":5,
    "txs":[{
        "Account":"ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb",
        "Amount":"24000000000",
        "Destination":"gJar3pA4cj8W5SvKg9JZ4PtiKkLj8613k3",
        "Fee":"12",
        "Flags":2147483648,
        "LastLedgerSequence":21498,
        "Sequence":30,
        "SigningPubKey":"BE3900393891A2A2244E28A82C43BA94CA94DD6BFE36D523576A22BFF86055D4",
        "TransactionType":"Payment",
        "TxnSignature":"75B068D4...",
        "hash":"498AE15B...",
        "inLedger":21490,
        "ledger_index":21490
         },
    ...
    ]},
    "status":"success",
    "type":"response"
  }]]></ws_example>
    </command>

    <command>
        <name>unsubscribe</name>
        <admin>false</admin>
        <desc><![CDATA[ Unsubscribe from events that were previously subscribed to. See <a href="#api-subscribe">subscribe</a> for a list of possible events.
        To unsubscribe from events previously subscribed to just specify them in the same way. ]]></desc>


        <ws_example><![CDATA[
            { "command" : "unsubscribe", "id": 42,  "accounts" : [ "ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb" ] }

            {"id":42,"result":{},"status":"success","type":"response"}
        ]]></ws_example>
    </command>


</commands>


