<?xml version="1.0" encoding="utf-8"?>
<commands>
    <command>
        <subnav>submit</subnav>
        <name>Payment</name>
        <admin>false</admin>
        <desc>Submit a payment transaction.</desc>

        <argument>
            <name>TransactionType</name>
            <required>true</required>
            <desc>Set to "Payment".</desc>
        </argument>
        <argument>
            <name>Account</name>
            <required>true</required>
            <desc>The account sending the payment.</desc>
        </argument>
        <argument>
            <name>Destination</name>
            <required>true</required>
            <desc>The account receiving the payment.</desc>
        </argument>
        <argument>
            <name>Amount</name>
            <type>amount</type>
            <required>true</required>
            <desc><![CDATA[ The amount to send. This is either a number of microstellars (if sending STR) or a {value,currency,issuer} triplet for sending a credit. ]]></desc>
        </argument>
        <argument>
            <name>Fee</name>
            <desc><![CDATA[Set the transaction fee in microstellars that is attached to this transaction. If the fee isn't specified it will be set by the server.]]></desc>
        </argument>
        <argument>
            <name>Sequence</name>
            <desc>Set the correct sequence number for the signing account. If the sequence isn't specified it will be set by the server.</desc>
        </argument>
        <argument>
            <name>DestinationTag</name>
            <type>int</type>
            <desc>Optional tag to associate with the transaction. </desc>
        </argument>

        <argument>
            <name>Paths</name>
            <desc>List of paths to send through.</desc>
        </argument>


        <cli_example><![CDATA[ > stellard submit s3q5ZGX2ScQK2rJ4JATp7rND6X5npG3De8jMbB7tuvm2HAVHcCN \
  "{"TransactionType":"Payment","Account":"ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb","Destination":"gHJPw9kW8v4BsUyDnBR8ZHWo8aEkhUMeAq","Amount":"2500000000"}"]]></cli_example>
        <rpc_example><![CDATA[curl -X POST https://test.stellar.org:9002 -d '
{
  "method": "submit",
  "params": [
    {
      "secret": "sfwtwgV3zHekZMm6F2cNPzEGzogQqPMEZcdVftKnrstngZvotYr",
      "tx_json": {
        "TransactionType": "Payment",
        "Account": "gM4Fpv2QuHY4knJsQyYGKEHFGw3eMBwc1U",
        "Destination": "g4eRqgZfzfj3132y17iaf2fp6HQj1gofjt",
        "Amount": {
          "currency": "USD",
          "value": "2",
          "issuer": "gBAde4mkDijZatAdNhBzCsuC7GP4MzhA3B"
        }
      }
    }
  ]
}' ]]></rpc_example>

        <ws_example><![CDATA[{
  "command" : "submit",
  "secret" : "s3q5ZGX2ScQK2rJ4JATp7rND6X5npG3De8jMbB7tuvm2HAVHcCN",
  "tx_json" : { "Account" : "ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb",
    "Amount" : "1000000000",
    "Destination" : "gHJPw9kW8v4BsUyDnBR8ZHWo8aEkhUMeAq",
    "TransactionType" : "Payment"
  }
}]]></ws_example>
    </command>

    <command>
        <name>AccountSet</name>
        <subnav>submit</subnav>
        <admin>false</admin>
        <desc>Submit an AccountSet transaction. This is used to set various flags of the account entry. You can use it to set the inflation destination of an account.</desc>

        <argument>
            <name>TransactionType</name>
            <required>true</required>
            <desc>Set to "AccountSet".</desc>
        </argument>
        <argument>
            <name>InflationDest</name>
            <type>address</type>
            <desc><![CDATA[Change the inflation destination for this account. ]]></desc>
        </argument>
        <argument>
            <name>TransferRate</name>
            <type>int</type>
            <default>1000000000</default>
            <desc><![CDATA[Set the transfer rate that this account will charge any time its credit moves from one account to another.
            The actual rate charged is equivalent to TransferRate/1000000000.
            For example if some gateway "WizardPay" has sets their TransferRate to 1020000000, the equivalent of 2%. Now Alice wants to send 100 WizardPay USD to Charlie.
            Alice will need to send 102 WizardPay USD so 100 gets to Charlie and 2 is essentially returned to "WizardPay" to pay the credit transfer fee.
            <p>Set the TransferRate to 1000000000 for no fee to move credit. You can't set the TransferRate below 1000000000.
             ]]></desc>
        </argument>
        <argument>
            <name>SetFlag</name>
            <type>int</type>
            <desc><![CDATA[Set to one of the following values:
             <ul>
             <li><strong>1</strong>- Require Destination tag flag. This flag is a hint to the client that this account only wants transactions with a destination tag.</li>
             <li><strong>2</strong>- Require Auth flag. If this flag is set then no one can hold credit from this account without prior authorization from this account. This setting is useful for gateways that need to KYC any that holds credit from them.</li>
             </ul>]]></desc>
        </argument>
        <argument>
            <name>ClearFlag</name>
        <type>int</type>
        <desc><![CDATA[Set to one of the following values:
             <ul>
             <li><strong>1</strong>- Require Destination tag flag. This flag is a hint to the client that this account only wants transactions with a destination tag.</li>
             <li><strong>2</strong>- Require Auth flag. If this flag is set then no one can hold credit from this account without prior authorization from this account. This setting is useful for gateways that need to KYC any that holds credit from them.</li>
             </ul>
]]></desc>
        </argument>

        <argument>
            <name>Fee</name>
            <desc><![CDATA[Set the transaction fee in microstellars that is attached to this transaction. If the fee isn't specified it will be set by the server.]]></desc>
        </argument>
        <argument>
            <name>Sequence</name>
            <desc>Set the correct sequence number for the signing account. If the sequence isn't specified it will be set by the server.</desc>
        </argument>
    </command>

    <command>
        <name>SetRegularKey</name>
        <subnav>submit</subnav>
        <admin>false</admin>
        <desc><![CDATA[Use to set or clear this account's <strong>regular key</strong>. The regular key can be used to sign transactions instead of the master secret key.
        This is useful since you can change the regular key if need be without recreating the whole account.]]></desc>

        <argument>
            <name>TransactionType</name>
            <required>true</required>
            <desc>Should be set "SetRegularKey".</desc>
        </argument>
        <argument>
            <name>RegularKey</name>
            <desc>If provided will change the regular key to this new value. If not provided it will clear the regular key so only the master key can sign again.</desc>
        </argument>

        <argument>
            <name>Fee</name>
            <desc><![CDATA[Set the transaction fee in microstellars that is attached to this transaction. If the fee isn't specified it will be set by the server.]]></desc>
        </argument>
        <argument>
            <name>Sequence</name>
            <desc>Set the correct sequence number for the signing account. If the sequence isn't specified it will be set by the server.</desc>
        </argument>
    </command>

    <command>
        <name>OfferCreate</name>
        <subnav>submit</subnav>
        <admin>false</admin>
        <desc><![CDATA[Add an offer to the distributed order book.
            Offers are commitments by the offerer to trade a certain amount of one currency for another. Offers can be partially taken.
            Creating an offer might result in an immediate trade if the created offer crosses with an existing one.]]></desc>

        <argument>
            <name>TransactionType</name>
            <required>true</required>
            <desc>Set to "OfferCreate".</desc>
        </argument>
        <argument>
            <name>Account</name>
            <required>true</required>
            <desc>The account creating the offer.</desc>
        </argument>
        <argument>
            <name>TakerGets</name>
            <required>true</required>
            <type>amount</type>
            <desc>This is what the account taking the offer will get. It is what the offer creator is agreeing to pay.</desc>
        </argument>
        <argument>
            <name>TakerPays</name>
            <type>amount</type>
            <required>true</required>
            <desc>This is what the offer creator will get and what the offer taker will pay.</desc>
        </argument>
        <argument>
            <name>OfferSequence</name>
            <desc>The sequence number of a previous offer. If specified the previous offer will be replaced with this one.</desc>
        </argument>
        <argument>
            <name>Fee</name>
            <desc><![CDATA[Set the transaction fee in microstellars that is attached to this transaction. If the fee isn't specified it will be set by the server.]]></desc>
        </argument>
        <argument>
            <name>Sequence</name>
            <desc>Set the correct sequence number for the signing account. If the sequence isn't specified it will be set by the server.</desc>
        </argument>

        <ws_example><![CDATA[{
  "command": "submit",
  "secret": "s3q5ZGX2ScQK2rJ4JATp7rND6X5npG3De8jMbB7tuvm2HAVHcCN",
  "tx_json": {
    "TransactionType": "OfferCreate",
    "Account": "ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb",
    "TakerGets": {
      "currency": "USD",
      "value": "1500",
      "issuer": "ghj4kXtHfQcCaLQwpLJ11q2hq6248R7k9C"
    },
    "TakerPays": {
      "currency": "BTC",
      "value": "2.5",
      "issuer": "ghj4kXtHfQcCaLQwpLJ11q2hq6248R7k9C"
    }
  }
}]]></ws_example>

        <rpc_example><![CDATA[curl -X POST https://test.stellar.org:9002 -d '
{
  "method": "submit",
  "params": [
    {
      "secret": "s3q5ZGX2ScQK2rJ4JATp7rND6X5npG3De8jMbB7tuvm2HAVHcCN",
      "tx_json": {
        "TransactionType": "OfferCreate",
        "Account": "ganVp9o5emfzpwrG5QVUXqMv8AgLcdvySb",
        "TakerGets": {
          "currency": "USD",
          "value": "1500",
          "issuer": "ghj4kXtHfQcCaLQwpLJ11q2hq6248R7k9C"
        },
        "TakerPays": {
          "currency": "BTC",
          "value": "2.5",
          "issuer": "ghj4kXtHfQcCaLQwpLJ11q2hq6248R7k9C"
        }
      }
    }
  ]
}']]></rpc_example>
    </command>

    <command>
        <name>OfferCancel</name>
        <subnav>submit</subnav>
        <admin>false</admin>
        <desc>Cancels an offer this account has made.</desc>
        <argument>
            <name>TransactionType</name>
            <required>true</required>
            <desc>Set to "OfferCancel".</desc>
        </argument>
        <argument>
            <name>Account</name>
            <required>true</required>
            <desc>The account canceling the offer.</desc>
        </argument>
        <argument>
            <name>OfferSequence</name>
            <required>true</required>
            <desc>The sequence number of the offer to cancel.</desc>
        </argument>
        <argument>
            <name>Fee</name>
            <desc><![CDATA[Set the transaction fee in microstellars that is attached to this transaction. If the fee isn't specified it will be set by the server.]]></desc>
        </argument>
        <argument>
            <name>Sequence</name>
            <desc>Set the correct sequence number for the signing account. If the sequence isn't specified it will be set by the server.</desc>
        </argument>
    </command>

    <command>
        <name>TrustSet</name>
        <subnav>submit</subnav>
        <admin>false</admin>
        <desc>Allows this account to hold credit in some currency from some other account. Any account say that it trusts another account for a particular currency up to a particular limit. Once an account trusts another it can hold credit from that other account.</desc>
        <argument>
            <name>TransactionType</name>
            <required>true</required>
            <desc>Set to "TrustSet".</desc>
        </argument>
        <argument>
            <name>Account</name>
            <required>true</required>
            <desc>The account extending trust.</desc>
        </argument>
        <argument>
            <name>LimitAmount</name>
            <required>true</required>
            <type>amount</type>
            <desc>An amount field specifying the type and amount of credit this account is willing to hold.</desc>
        </argument>
        <argument>
            <name>Fee</name>
            <desc><![CDATA[Set the transaction fee in microstellars that is attached to this transaction. If the fee isn't specified it will be set by the server.]]></desc>
        </argument>
        <argument>
            <name>Flags</name>
            <type>int</type>
            <desc><![CDATA[Allows you to change settings of this line. Possible flags are:
            <ul>
            <li>tfSetAuth (0x00010000) | Set lsfLowAuth or lsfHighAuth as appropriate.</li>
            <li>tfSetNoRipple (x00020000) | Set lsfLowNoRipple or lsfHighNoRipple as appropriate.</li>
            <li>tfClearNoRipple (x00040000) | Clear lsfLowNoRipple or lsfHighNoRipple as appropriate.</li>
            </ul>
               ]]></desc>
        </argument>
        <argument>
            <name>Sequence</name>
            <desc>Set the correct sequence number for the signing account. If the sequence isn't specified it will be set by the server.</desc>
        </argument>
    </command>
  
    <command>
      <subnav>submit</subnav>
      <name>AccountMerge</name>
      <admin>false</admin>
      <desc><![CDATA[An account merge transaction.<p>Balances are moved to the destination account.</p>
<p>Note that the destination account's trust lines must be able to accomodate for the updated balances:
<ul>
<li>balance must be positive</li>
<li>resulting balance must not be over limit</li>
<li>destination must be authorized if the source account was authorized with a gateway.</li>
</ul></p>]]></desc>

      <argument>
        <name>TransactionType</name>
        <required>true</required>
        <desc>Set to "AccountMerge".</desc>
      </argument>
      <argument>
        <name>Account</name>
        <required>true</required>
        <desc>The source account to merge.</desc>
      </argument>
      <argument>
        <name>Destination</name>
        <required>true</required>
        <desc>The account to merge the source account into.</desc>
      </argument>

      <cli_example>
        <![CDATA[ > stellard submit sfHTRZFpsX7yc2VJLvhJzpzjiag5W6ofy9xgZSwuubcLhS1atmv \
  "{"TransactionType":"AccountMerge","Account":"gD1RB8jG5DTSEnjJ1PQyoHEWXGbGCfCLAZ","Destination":"gUK9iE1ZdTcPFM4dBYKzKpweHxU45vMouQ"}"]]>
      </cli_example>
      <rpc_example>
        <![CDATA[curl -X POST https://test.stellar.org:9002 -d '
{
  "method": "submit",
  "params": [
    {
      "secret": "sfHTRZFpsX7yc2VJLvhJzpzjiag5W6ofy9xgZSwuubcLhS1atmv",
      "tx_json": {
        "TransactionType": "AccountMerge",
        "Account": "gD1RB8jG5DTSEnjJ1PQyoHEWXGbGCfCLAZ",
        "Destination": "gUK9iE1ZdTcPFM4dBYKzKpweHxU45vMouQ"
        }
      }
    }
  ]
}' ]]>
      </rpc_example>

      <ws_example>
        <![CDATA[{
  "command" : "submit",
  "secret" : "sfHTRZFpsX7yc2VJLvhJzpzjiag5W6ofy9xgZSwuubcLhS1atmv",
  "tx_json" : { "Account" : "gD1RB8jG5DTSEnjJ1PQyoHEWXGbGCfCLAZ",
    "Destination" : "gUK9iE1ZdTcPFM4dBYKzKpweHxU45vMouQ",
    "TransactionType" : "AccountMerge"
  }
}]]>
      </ws_example>
    </command>
  
    <command>
        <name>submit</name>
        <admin>false</admin>
        <desc>Submits a transaction to the network. The transaction can be submitted unsigned if you include your secret key and stellard will sign it for you.</desc>

        <argument>
            <name>secret</name>
            <desc>The signer's secret key. Do not provide this field to untrusted servers. Required if submitting with tx_json parameter.</desc>
        </argument>
        <argument>
            <name>tx_json</name>
            <desc>This is the JSON representation of the transaction to submit. See the specific transactions for details.</desc>
        </argument>

        <argument>
            <name>tx_blob</name>
            <desc><![CDATA[This is a signed and serialized transaction. Obtain a signed transaction blob by either signing the transaction yourself using the javascript-lib, or by calling the <a href="#api-sign">sign</a> command first with the transaction's details. Use this version if you don't want to expose your secret key to stellard.]]></desc>
        </argument>
    </command>

</commands>
